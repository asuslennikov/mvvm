apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def libraryGroupId = 'com.github.asuslennikov'
def libraryVersion = '0.8.0'

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['MVVM_Api', 'MVVM_Domain', 'MVVM_Presentation']
    publish = true
    pkg {
        repo = 'maven'
        name = 'android-mvvm'
        userOrg = 'asuslennikov'
        desc = 'Android ViewModel with "clean architecture" and React states.'
        websiteUrl = 'https://github.com/asuslennikov'
        issueTrackerUrl = 'https://github.com/asuslennikov/mvvm/issues'
        vcsUrl = 'https://github.com/asuslennikov/mvvm.git'
        licenses = ['MIT']

        githubRepo = 'asuslennikov/mvvm'
        githubReleaseNotesFile = 'README.md'

        version {
            name = libraryVersion
            desc = "Android MVVM library, version $libraryVersion"
            released = new Date()
            vcsTag = "v$libraryVersion"

            gpg {
                sign = true
                passphrase = System.getenv('BINTRAY_PASSPHRASE')
            }
        }
    }
}

publishing {
    publications {
        MVVM_Api(MavenPublication) {
            groupId = "$libraryGroupId"
            artifactId = 'mvvm-api'
            version = "$libraryVersion"
            artifact("$projectDir/${artifactId}/build/libs/${artifactId}.jar")

            pom {
                appendGeneralInfoToPom(it, project(":${artifactId}"))
            }
        }

        MVVM_Domain(MavenPublication) {
            groupId = "$libraryGroupId"
            artifactId = 'mvvm-domain'
            version = "$libraryVersion"
            artifact("$projectDir/${artifactId}/build/libs/${artifactId}.jar")

            pom {
                appendGeneralInfoToPom(it, project(":${artifactId}"))
                withXml {
                    appendDependencyNode(it, "$libraryGroupId", 'mvvm-api', "$libraryVersion")
                }
            }
        }

        MVVM_Presentation(MavenPublication) {
            groupId = "$libraryGroupId"
            artifactId = 'mvvm-presentation'
            version = "$libraryVersion"
            artifact("$projectDir/${artifactId}/build/outputs/aar/${artifactId}-release.aar")

            pom {
                appendGeneralInfoToPom(it, project(":${artifactId}"))
                withXml {
                    appendDependencyNode(it, "$libraryGroupId", 'mvvm-api', "$libraryVersion")
                }
            }
        }
    }
}

void appendGeneralInfoToPom(def pom, def project) {
    def pomFieldSetter = {
        name = "Android MVVM library, module $project.name"
        description = "$bintray.pkg.desc"
        url = "$bintray.pkg.websiteUrl"
        licenses {
            license {
                name = "MIT"
                url = 'https://opensource.org/licenses/MIT'
            }
        }
        developers {
            developer {
                id = 'asuslennikov'
                name = 'Anton Suslennikov'
                email = 'anton.external@gmail.com'
            }
        }
        scm {
            connection = "$bintray.pkg.vcsUrl"
            url = "$bintray.pkg.websiteUrl"
        }
        withXml {
            appendDependenciesNodeToPom(it, project, 'api')
            appendDependenciesNodeToPom(it, project, 'implementation')
        }
    }
    pomFieldSetter.delegate = pom
    pomFieldSetter()
}


private static Object getDependenciesNodeFromPom(mavenPom) {
    def dependenciesNode = mavenPom.asNode().dependencies[0]
    if (dependenciesNode == null) {
        dependenciesNode = mavenPom.asNode().appendNode('dependencies')
    }
    return dependenciesNode
}

private static void appendDependenciesNodeToPom(def mavenPom, def project, String dependencyType) {
    def dependenciesNode = getDependenciesNodeFromPom(mavenPom)
    project.configurations[dependencyType].allDependencies.each { ModuleDependency dp ->
        if ('unspecified'.equals(dp.version)){
            return
        }
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', dp.group)
        dependencyNode.appendNode('artifactId', dp.name)
        dependencyNode.appendNode('version', dp.version)

        if (dp.excludeRules.size() > 0) {
            def exclusions = dependencyNode.appendNode('exclusions')
            dp.excludeRules.each { ExcludeRule ex ->
                def exclusion = exclusions.appendNode('exclusion')
                exclusion.appendNode('groupId', ex.group)
                exclusion.appendNode('artifactId', ex.module)
            }
        }
    }
}

static void appendDependencyNode(def mavenPom, String groupId, String artifactId, String version) {
    def dependenciesNode = getDependenciesNodeFromPom(mavenPom)
    def dependencyNode = dependenciesNode.appendNode('dependency')
    dependencyNode.appendNode('groupId', groupId)
    dependencyNode.appendNode('artifactId', artifactId)
    dependencyNode.appendNode('version', version)
}